"use strict"
function _createForOfIteratorHelper(e, t) {
	var r,
		o,
		n,
		a,
		c = ("undefined" != typeof Symbol && e[Symbol.iterator]) || e["@@iterator"]
	if (c)
		return (
			(o = !(r = !0)),
			{
				s: function () {
					c = c.call(e)
				},
				n: function () {
					var e = c.next()
					return (r = e.done), e
				},
				e: function (e) {
					;(o = !0), (n = e)
				},
				f: function () {
					try {
						r || null == c.return || c.return()
					} finally {
						if (o) throw n
					}
				},
			}
		)
	if (
		Array.isArray(e) ||
		(c = _unsupportedIterableToArray(e)) ||
		(t && e && "number" == typeof e.length)
	)
		return (
			c && (e = c),
			(a = 0),
			{
				s: (t = function () {}),
				n: function () {
					return a >= e.length ? { done: !0 } : { done: !1, value: e[a++] }
				},
				e: function (e) {
					throw e
				},
				f: t,
			}
		)
	throw new TypeError(
		"Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
	)
}
function _unsupportedIterableToArray(e, t) {
	var r
	if (e)
		return "string" == typeof e
			? _arrayLikeToArray(e, t)
			: "Map" ===
					(r =
						"Object" === (r = Object.prototype.toString.call(e).slice(8, -1)) &&
						e.constructor
							? e.constructor.name
							: r) || "Set" === r
			? Array.from(e)
			: "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
			? _arrayLikeToArray(e, t)
			: void 0
}
function _arrayLikeToArray(e, t) {
	;(null == t || t > e.length) && (t = e.length)
	for (var r = 0, o = new Array(t); r < t; r++) o[r] = e[r]
	return o
}
var membersList = document.querySelector(".members__list"),
	todoLists = document.querySelectorAll(".todo__list"),
	membersBoard = document.querySelector(".members__board"),
	memberSelect = document.querySelector(".newtask__board select.member"),
	newtaskBoard = document.querySelector(".newtask__board"),
	addTaskBtn = document.querySelector(".addTask"),
	saveNewTaskBtn = document.querySelector(".save"),
	cancelNewTaskBtn = document.querySelector(".cancel"),
	newmemberBoard = document.querySelector(".newmember__board"),
	addMemberBtn = document.querySelector(".addMember"),
	newNameInput = document.querySelector(".newmember__name"),
	newColorSelect = document.querySelector(".select__color"),
	saveMember = document.querySelector(".saveMember"),
	cancelMember = document.querySelector(".cancelMember"),
	daySelect = document.querySelector(".day"),
	taskInput = document.querySelector(".task"),
	dayBoxes = document.querySelectorAll(".daybox"),
	showTaskCreator = function () {
		newtaskBoard.classList.add("show")
	},
	showMemberCreator = function () {
		newmemberBoard.classList.add("show")
	},
	checkColorAvailability = function (e) {
		return (
			-1 ===
			Array.from(document.querySelectorAll(".member__color"))
				.map(function (e) {
					return e.style.backgroundColor
				})
				.indexOf("rgb(".concat(e, ")"))
		)
	},
	clearInputs = function () {
		;(taskInput.value = ""), (daySelect.value = ""), (newNameInput.value = "")
		var e,
			t = _createForOfIteratorHelper(document.getElementsByTagName("input"))
		try {
			for (t.s(); !(e = t.n()).done; ) e.value.value = ""
		} catch (e) {
			t.e(e)
		} finally {
			t.f()
		}
	},
	closeWindow = function () {
		newtaskBoard.classList.add("close"),
			newtaskBoard.classList.remove("show"),
			newmemberBoard.classList.add("close"),
			newmemberBoard.classList.remove("show")
	},
	createNewTask = function () {
		var e = daySelect.value,
			t = taskInput.value,
			r = memberSelect.value,
			o =
				memberSelect.options[memberSelect.selectedIndex].getAttribute(
					"data-color"
				)
		e &&
			t &&
			r &&
			((r = "#day".concat(e)),
			(e = document.querySelector(r).querySelector(".todo__list")),
			(r = document.createElement("li")).classList.add("todo__list__item"),
			(r.innerHTML =
				'<img class="checkmark" src="./dist/img/icons/checkmark.png" alt=""> '.concat(
					t
				)),
			(r.style.background = "#".concat(o)),
			e.appendChild(r),
			clearInputs())
	},
	addNewFamilyMember = function (e, t) {
		var r = document.querySelector(".member"),
			o = document.createElement("option")
		;(o.value = e),
			(o.textContent = e),
			(o.style.backgroundColor = t),
			r.appendChild(o)
	},
	saveNewMember = function () {
		var e,
			t,
			r,
			o,
			n = newNameInput.value.trim(),
			a = document.querySelector(".members__list"),
			c = document.querySelector(".select__color"),
			l = memberSelect.querySelectorAll("option")
		n
			? Array.from(l).find(function (e) {
					return e.value.toLowerCase() === n.toLowerCase()
			  })
				? alert("Member ".concat(n, " already exists."))
				: ((l = c.value.toLowerCase()),
				  Array.from(document.querySelectorAll(".member__color")).map(function (
						e
				  ) {
						return e.style.backgroundColor.substring(1).toLowerCase()
				  }),
				  checkColorAvailability(l)
						? ((e = document.createElement("li")).classList.add("member"),
						  (t = document.createElement("div")).classList.add(
								"member__color"
						  ),
						  (t.style.backgroundColor = "#" + l),
						  ((r = document.createElement("p")).innerHTML = n),
						  (o =
								Date.now().toString(36) +
								Math.random().toString(36).substr(2, 5)),
						  e.setAttribute("id", "member-".concat(o)),
						  ((o = document.createElement("option")).value = n),
						  (o.textContent = n),
						  (o.dataset.color = l),
						  memberSelect.appendChild(o),
						  e.appendChild(t),
						  e.appendChild(r),
						  a.appendChild(e),
						  c
								.querySelector("option[value='".concat(l, "']"))
								.setAttribute("disabled", !0),
						  clearInputs(),
						  closeWindow())
						: alert(
								"Color ".concat(
									l,
									" is already in use by another family member."
								)
						  ))
			: (newNameInput.placeholder = "Please enter a name before you save")
	},
	saveTask = function () {
		createNewTask(), clearInputs(), closeWindow()
	}
addTaskBtn.addEventListener("click", showTaskCreator),
	cancelNewTaskBtn.addEventListener("click", closeWindow),
	saveNewTaskBtn.addEventListener("click", saveTask),
	addMemberBtn.addEventListener("click", showMemberCreator),
	cancelMember.addEventListener("click", closeWindow),
	saveMember.addEventListener("click", saveNewMember)
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJtZW1iZXJzTGlzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRvZG9MaXN0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZW1iZXJzQm9hcmQiLCJtZW1iZXJTZWxlY3QiLCJuZXd0YXNrQm9hcmQiLCJhZGRUYXNrQnRuIiwiY2FuY2VsTmV3VGFza0J0biIsIm5ld21lbWJlckJvYXJkIiwiYWRkTWVtYmVyQnRuIiwibmV3TmFtZUlucHV0IiwibmV3Q29sb3JTZWxlY3QiLCJzYXZlTWVtYmVyIiwiZGF5U2VsZWN0IiwidGFza0lucHV0IiwiZGF5Qm94ZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJzaG93TWVtYmVyQ3JlYXRvciIsImNoZWNrQ29sb3JBdmFpbGFiaWxpdHkiLCJjb2xvciIsImluZGV4T2YiLCJtYXAiLCJjbGVhcklucHV0cyIsInN0eWxlIiwiY29uY2F0IiwiaW5wdXRzIiwidmFsdWUiLCJfc3RlcCIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwibiIsImRvbmUiLCJpbnB1dCIsImVyciIsImUiLCJmIiwiY2xvc2VXaW5kb3ciLCJyZW1vdmUiLCJ0YXNrIiwiY3JlYXRlTmV3VGFzayIsInNlbGVjdGVkRGF5Iiwic2VsZWN0ZWRJbmRleCIsImdldEF0dHJpYnV0ZSIsInNlbGVjdGVkTWVtYmVyIiwiZGF5RWwiLCJkYXlJZCIsImxpc3RJdGVtIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImJhY2tncm91bmQiLCJzZWxlY3RlZENvbG9yIiwidG9kb0xpc3QiLCJvcHRpb24iLCJ0ZXh0Q29udGVudCIsIm5hbWUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzZWxlY3QiLCJzYXZlTmV3TWVtYmVyIiwibWVtYmVyTmFtZSIsIm5ld01lbWJlck9wdGlvbiIsIm1lbWJlclNlbGVjdE9wdGlvbnMiLCJuZXdNZW1iZXJOYW1lIiwicGxhY2Vob2xkZXIiLCJBcnJheSIsImZpbmQiLCJ0b0xvd2VyQ2FzZSIsImFsZXJ0IiwiZnJvbSIsIm5ld01lbWJlciIsInN1YnN0cmluZyIsIm1lbWJlcklkIiwidG9TdHJpbmciLCJtZW1iZXJDb2xvciIsImFwcGVuZENoaWxkIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHIiLCJzZXRBdHRyaWJ1dGUiLCJkYXRhc2V0Iiwic2F2ZVRhc2siLCJhZGRFdmVudExpc3RlbmVyIiwiY2FuY2VsTWVtYmVyIiwic2hvd1Rhc2tDcmVhdG9yIiwic2F2ZU5ld1Rhc2tCdG4iXSwibWFwcGluZ3MiOiJvb0NBQUEsSUFBTUEsWUFBY0MsU0FBU0MsY0FBYyxnQkFBZ0IsRUFDckRDLFVBQVlGLFNBQVNHLGlCQUFpQixhQUFhLEVBRW5EQyxhQUFlSixTQUFTQyxjQUFjLGlCQUFpQixFQUN2REksYUFBZUwsU0FBU0MsY0FBYywrQkFBK0IsRUFIckVDLGFBQVlGLFNBQVNHLGNBQWlCLGlCQUFjLEVBRXBEQyxXQUFlSixTQUFTQyxjQUFjLFVBQUEsRUFHdENLLGVBQWVOLFNBQVNDLGNBQWMsT0FBQSxFQUN0Q00saUJBQXFCUCxTQUFDQyxjQUFjLFNBQVcsRUFHL0NPLGVBQW1CUixTQUFTQyxjQUFjLG1CQUFVLEVBRXBEUSxhQUFpQlQsU0FBU0MsY0FBYyxZQUFBLEVBQ3hDUyxhQUFlVixTQUFTQyxjQUFjLGtCQUFhLEVBQ25EVSxlQUFlWCxTQUFTQyxjQUFjLGdCQUFtQixFQUN6RFcsV0FBY1osU0FBR0EsY0FBU0MsYUFBYyxFQUN4Q1ksYUFBYWIsU0FBU0MsY0FBYyxlQUFjLEVBR2xEYSxVQUFZZCxTQUFTQyxjQUFjLE1BQU8sRUFDMUNjLFVBQVlmLFNBQVNDLGNBQWMsT0FBUSxFQUMzQ2UsU0FBV2hCLFNBQVNHLGlCQUFpQixTQUFVLEVBR3BERyxnQkFBc0IsV0FDdEJBLGFBQUFXLFVBQUFDLElBQUEsTUFBQSxDQUVELEVBRUNDLGtCQUFBLFdBRURWLGVBQU1XLFVBQXNCRixJQUFHLE1BQUEsQ0FGL0Is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bi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1lbWJlcnNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW1iZXJzX19saXN0XCIpXG5jb25zdCB0b2RvTGlzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvZG9fX2xpc3RcIilcblxuY29uc3QgbWVtYmVyc0JvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW1iZXJzX19ib2FyZFwiKVxuY29uc3QgbWVtYmVyU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXd0YXNrX19ib2FyZCBzZWxlY3QubWVtYmVyXCIpXG5cbmNvbnN0IG5ld3Rhc2tCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3dGFza19fYm9hcmRcIilcbmNvbnN0IGFkZFRhc2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFRhc2tcIilcblxuY29uc3Qgc2F2ZU5ld1Rhc2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNhdmVcIilcbmNvbnN0IGNhbmNlbE5ld1Rhc2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbmNlbFwiKVxuXG5jb25zdCBuZXdtZW1iZXJCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3bWVtYmVyX19ib2FyZFwiKVxuY29uc3QgYWRkTWVtYmVyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRNZW1iZXJcIilcbmNvbnN0IG5ld05hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3bWVtYmVyX19uYW1lXCIpXG5jb25zdCBuZXdDb2xvclNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VsZWN0X19jb2xvclwiKVxuY29uc3Qgc2F2ZU1lbWJlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2F2ZU1lbWJlclwiKVxuY29uc3QgY2FuY2VsTWVtYmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxNZW1iZXJcIilcblxuY29uc3QgZGF5U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kYXlcIilcbmNvbnN0IHRhc2tJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza1wiKVxuY29uc3QgZGF5Qm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRheWJveFwiKVxuXG5jb25zdCBzaG93VGFza0NyZWF0b3IgPSAoKSA9PiB7XG5cdG5ld3Rhc2tCb2FyZC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKVxufVxuXG5jb25zdCBzaG93TWVtYmVyQ3JlYXRvciA9ICgpID0+IHtcblx0bmV3bWVtYmVyQm9hcmQuY2xhc3NMaXN0LmFkZChcInNob3dcIilcbn1cblxuY29uc3QgY2hlY2tDb2xvckF2YWlsYWJpbGl0eSA9IGNvbG9yID0+IHtcblx0Y29uc3QgbWVtYmVyQ29sb3JzID0gQXJyYXkuZnJvbShcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lbWJlcl9fY29sb3JcIilcblx0KS5tYXAoY29sb3IgPT4gY29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKVxuXHRyZXR1cm4gbWVtYmVyQ29sb3JzLmluZGV4T2YoYHJnYigke2NvbG9yfSlgKSA9PT0gLTFcbn1cblxuY29uc3QgY2xlYXJJbnB1dHMgPSAoKSA9PiB7XG5cdHRhc2tJbnB1dC52YWx1ZSA9IFwiXCJcblx0ZGF5U2VsZWN0LnZhbHVlID0gXCJcIlxuXHRuZXdOYW1lSW5wdXQudmFsdWUgPSBcIlwiXG5cdGNvbnN0IGlucHV0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilcblx0Zm9yIChsZXQgaW5wdXQgb2YgaW5wdXRzKSB7XG5cdFx0aW5wdXQudmFsdWUgPSBcIlwiXG5cdH1cbn1cblxuY29uc3QgY2xvc2VXaW5kb3cgPSAoKSA9PiB7XG5cdG5ld3Rhc2tCb2FyZC5jbGFzc0xpc3QuYWRkKFwiY2xvc2VcIilcblx0bmV3dGFza0JvYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpXG5cdG5ld21lbWJlckJvYXJkLmNsYXNzTGlzdC5hZGQoXCJjbG9zZVwiKVxuXHRuZXdtZW1iZXJCb2FyZC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKVxufVxuXG5jb25zdCBjcmVhdGVOZXdUYXNrID0gKCkgPT4ge1xuXHRjb25zdCBzZWxlY3RlZERheSA9IGRheVNlbGVjdC52YWx1ZVxuXHRjb25zdCB0YXNrID0gdGFza0lucHV0LnZhbHVlXG5cdGNvbnN0IHNlbGVjdGVkTWVtYmVyID0gbWVtYmVyU2VsZWN0LnZhbHVlXG5cdGNvbnN0IHNlbGVjdGVkQ29sb3IgPVxuXHRcdG1lbWJlclNlbGVjdC5vcHRpb25zW21lbWJlclNlbGVjdC5zZWxlY3RlZEluZGV4XS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yXCIpXG5cblx0aWYgKHNlbGVjdGVkRGF5ICYmIHRhc2sgJiYgc2VsZWN0ZWRNZW1iZXIpIHtcblx0XHRjb25zdCBkYXlJZCA9IGAjZGF5JHtzZWxlY3RlZERheX1gXG5cdFx0Y29uc3QgZGF5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRheUlkKVxuXHRcdGNvbnN0IHRvZG9MaXN0ID0gZGF5RWwucXVlcnlTZWxlY3RvcihcIi50b2RvX19saXN0XCIpXG5cblx0XHRjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKVxuXHRcdGxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoXCJ0b2RvX19saXN0X19pdGVtXCIpXG5cdFx0bGlzdEl0ZW0uaW5uZXJIVE1MID0gYDxpbWcgY2xhc3M9XCJjaGVja21hcmtcIiBzcmM9XCIuL2Rpc3QvaW1nL2ljb25zL2NoZWNrbWFyay5wbmdcIiBhbHQ9XCJcIj4gJHt0YXNrfWBcblx0XHRsaXN0SXRlbS5zdHlsZS5iYWNrZ3JvdW5kID0gYCMke3NlbGVjdGVkQ29sb3J9YFxuXG5cdFx0dG9kb0xpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pXG5cdFx0Y2xlYXJJbnB1dHMoKVxuXHR9XG59XG5cbmNvbnN0IGFkZE5ld0ZhbWlseU1lbWJlciA9IChuYW1lLCBjb2xvcikgPT4ge1xuXHRjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbWJlclwiKVxuXHRjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpXG5cdG9wdGlvbi52YWx1ZSA9IG5hbWVcblx0b3B0aW9uLnRleHRDb250ZW50ID0gbmFtZVxuXHRvcHRpb24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3Jcblx0c2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbilcbn1cblxuY29uc3Qgc2F2ZU5ld01lbWJlciA9ICgpID0+IHtcblx0Y29uc3QgbmV3TWVtYmVyTmFtZSA9IG5ld05hbWVJbnB1dC52YWx1ZS50cmltKClcblx0Y29uc3QgbWVtYmVyc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbWJlcnNfX2xpc3RcIilcblx0Y29uc3QgbmV3Q29sb3JTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlbGVjdF9fY29sb3JcIilcblx0Y29uc3QgbWVtYmVyU2VsZWN0T3B0aW9ucyA9IG1lbWJlclNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKFwib3B0aW9uXCIpXG5cblx0aWYgKCFuZXdNZW1iZXJOYW1lKSB7XG5cdFx0bmV3TmFtZUlucHV0LnBsYWNlaG9sZGVyID0gXCJQbGVhc2UgZW50ZXIgYSBuYW1lIGJlZm9yZSB5b3Ugc2F2ZVwiXG5cdFx0cmV0dXJuXG5cdH1cblxuXHQvLyBzcHJhd2TFuiwgY3p5IGlzdG5pZWplIGp1xbwgb3BjamEgeiBkYW55bSBpbWllbmllbVxuXHRjb25zdCBleGlzdGluZ09wdGlvbiA9IEFycmF5LmZyb20obWVtYmVyU2VsZWN0T3B0aW9ucykuZmluZChcblx0XHRvcHRpb24gPT4gb3B0aW9uLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IG5ld01lbWJlck5hbWUudG9Mb3dlckNhc2UoKVxuXHQpXG5cblx0aWYgKGV4aXN0aW5nT3B0aW9uKSB7XG5cdFx0YWxlcnQoYE1lbWJlciAke25ld01lbWJlck5hbWV9IGFscmVhZHkgZXhpc3RzLmApXG5cdFx0cmV0dXJuXG5cdH1cblxuXHQvLyBzcHJhd2TFuiwgY3p5IHd5YnJhbnkga29sb3IgamVzdCBqdcW8IHXFvHl3YW55IHByemV6IGlubmVnbyBjesWCb25rYSByb2R6aW55XG5cdGNvbnN0IHNlbGVjdGVkQ29sb3IgPSBuZXdDb2xvclNlbGVjdC52YWx1ZS50b0xvd2VyQ2FzZSgpXG5cdGNvbnN0IG1lbWJlckNvbG9ycyA9IEFycmF5LmZyb20oXG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tZW1iZXJfX2NvbG9yXCIpXG5cdCkubWFwKGNvbG9yID0+IGNvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvci5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSlcblx0aWYgKCFjaGVja0NvbG9yQXZhaWxhYmlsaXR5KHNlbGVjdGVkQ29sb3IpKSB7XG5cdFx0YWxlcnQoYENvbG9yICR7c2VsZWN0ZWRDb2xvcn0gaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciBmYW1pbHkgbWVtYmVyLmApXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRjb25zdCBuZXdNZW1iZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIilcblx0bmV3TWVtYmVyLmNsYXNzTGlzdC5hZGQoXCJtZW1iZXJcIilcblxuXHRjb25zdCBtZW1iZXJDb2xvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcblx0bWVtYmVyQ29sb3IuY2xhc3NMaXN0LmFkZChcIm1lbWJlcl9fY29sb3JcIilcblx0bWVtYmVyQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjXCIgKyBzZWxlY3RlZENvbG9yXG5cblx0Y29uc3QgbWVtYmVyTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXG5cdG1lbWJlck5hbWUuaW5uZXJIVE1MID0gbmV3TWVtYmVyTmFtZVxuXG5cdGNvbnN0IG1lbWJlcklkID1cblx0XHREYXRlLm5vdygpLnRvU3RyaW5nKDM2KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA1KVxuXHRuZXdNZW1iZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgYG1lbWJlci0ke21lbWJlcklkfWApXG5cblx0Y29uc3QgbmV3TWVtYmVyT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxuXHRuZXdNZW1iZXJPcHRpb24udmFsdWUgPSBuZXdNZW1iZXJOYW1lXG5cdG5ld01lbWJlck9wdGlvbi50ZXh0Q29udGVudCA9IG5ld01lbWJlck5hbWVcblx0bmV3TWVtYmVyT3B0aW9uLmRhdGFzZXQuY29sb3IgPSBzZWxlY3RlZENvbG9yXG5cdG1lbWJlclNlbGVjdC5hcHBlbmRDaGlsZChuZXdNZW1iZXJPcHRpb24pXG5cblx0bmV3TWVtYmVyLmFwcGVuZENoaWxkKG1lbWJlckNvbG9yKVxuXHRuZXdNZW1iZXIuYXBwZW5kQ2hpbGQobWVtYmVyTmFtZSlcblx0bWVtYmVyc0xpc3QuYXBwZW5kQ2hpbGQobmV3TWVtYmVyKVxuXG5cdC8vIERvZGFqZW15IGF0cnlidXQgJ2Rpc2FibGVkJyBkbyBvcGNqaSB3eWJvcnUga29sb3J1IGRsYSB3eWJyYW5lZ28gY3rFgm9ua2Egcm9kemlueVxuXHRuZXdDb2xvclNlbGVjdFxuXHRcdC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9JyR7c2VsZWN0ZWRDb2xvcn0nXWApXG5cdFx0LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpXG5cblx0Y2xlYXJJbnB1dHMoKVxuXHRjbG9zZVdpbmRvdygpXG59XG5cbmNvbnN0IHNhdmVUYXNrID0gKCkgPT4ge1xuXHRjcmVhdGVOZXdUYXNrKClcblx0Y2xlYXJJbnB1dHMoKVxuXHRjbG9zZVdpbmRvdygpXG59XG5cbmFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dUYXNrQ3JlYXRvcilcbmNhbmNlbE5ld1Rhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlV2luZG93KVxuc2F2ZU5ld1Rhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNhdmVUYXNrKVxuXG5hZGRNZW1iZXJCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dNZW1iZXJDcmVhdG9yKVxuY2FuY2VsTWVtYmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZVdpbmRvdylcbnNhdmVNZW1iZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNhdmVOZXdNZW1iZXIpXG4iXX0=
