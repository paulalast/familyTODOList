"use strict"
function _createForOfIteratorHelper(e, t) {
	var r,
		o,
		n,
		a,
		c = ("undefined" != typeof Symbol && e[Symbol.iterator]) || e["@@iterator"]
	if (c)
		return (
			(o = !(r = !0)),
			{
				s: function () {
					c = c.call(e)
				},
				n: function () {
					var e = c.next()
					return (r = e.done), e
				},
				e: function (e) {
					;(o = !0), (n = e)
				},
				f: function () {
					try {
						r || null == c.return || c.return()
					} finally {
						if (o) throw n
					}
				},
			}
		)
	if (
		Array.isArray(e) ||
		(c = _unsupportedIterableToArray(e)) ||
		(t && e && "number" == typeof e.length)
	)
		return (
			c && (e = c),
			(a = 0),
			{
				s: (t = function () {}),
				n: function () {
					return a >= e.length ? { done: !0 } : { done: !1, value: e[a++] }
				},
				e: function (e) {
					throw e
				},
				f: t,
			}
		)
	throw new TypeError(
		"Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
	)
}
function _unsupportedIterableToArray(e, t) {
	var r
	if (e)
		return "string" == typeof e
			? _arrayLikeToArray(e, t)
			: "Map" ===
					(r =
						"Object" === (r = Object.prototype.toString.call(e).slice(8, -1)) &&
						e.constructor
							? e.constructor.name
							: r) || "Set" === r
			? Array.from(e)
			: "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
			? _arrayLikeToArray(e, t)
			: void 0
}
function _arrayLikeToArray(e, t) {
	;(null == t || t > e.length) && (t = e.length)
	for (var r = 0, o = new Array(t); r < t; r++) o[r] = e[r]
	return o
}
var membersList = document.querySelector(".members__list"),
	todoLists = document.querySelectorAll(".todo__list"),
	membersBoard = document.querySelector(".members__board"),
	memberSelect = document.querySelector(".newtask__board select.member"),
	newtaskBoard = document.querySelector(".newtask__board"),
	addTaskBtn = document.querySelector(".addTask"),
	saveNewTaskBtn = document.querySelector(".save"),
	cancelNewTaskBtn = document.querySelector(".cancel"),
	newmemberBoard = document.querySelector(".newmember__board"),
	addMemberBtn = document.querySelector(".addMember"),
	newNameInput = document.querySelector(".newmember__name"),
	newColorSelect = document.querySelector(".select__color"),
	saveMember = document.querySelector(".saveMember"),
	cancelMember = document.querySelector(".cancelMember"),
	daySelect = document.querySelector(".day"),
	taskInput = document.querySelector(".task"),
	dayBoxes = document.querySelectorAll(".daybox"),
	showTaskCreator = function () {
		newtaskBoard.classList.add("show")
	},
	showMemberCreator = function () {
		newmemberBoard.classList.add("show")
	},
	clearInputs = function () {
		;(taskInput.value = ""), (daySelect.value = ""), (newNameInput.value = "")
		var e,
			t = _createForOfIteratorHelper(document.getElementsByTagName("input"))
		try {
			for (t.s(); !(e = t.n()).done; ) e.value.value = ""
		} catch (e) {
			t.e(e)
		} finally {
			t.f()
		}
	},
	closeWindow = function () {
		newtaskBoard.classList.add("close"),
			newtaskBoard.classList.remove("show"),
			newmemberBoard.classList.add("close"),
			newmemberBoard.classList.remove("show")
	},
	createNewTask = function () {
		var e,
			t = daySelect.value,
			r = taskInput.value,
			o = memberSelect.value,
			n =
				memberSelect.options[memberSelect.selectedIndex].getAttribute(
					"data-color"
				)
		t &&
			r &&
			o &&
			((t = "#day".concat(t)),
			(t = document.querySelector(t).querySelector(".todo__list")),
			(e = document.createElement("li")).classList.add("todo__list__item"),
			(e.innerHTML =
				'<img class="checkmark" src="./dist/img/icons/checkmark.png" alt=""> '.concat(
					r
				)),
			(e.style.background = "#".concat(n)),
			t.appendChild(e),
			console.log(n),
			((r = document.createElement("option")).value = o),
			(r.text = o),
			(r.style.backgroundColor = n),
			memberSelect.appendChild(r))
	},
	addNewFamilyMember = function (e, t) {
		var r = document.querySelector(".member"),
			o = document.createElement("option")
		;(o.value = e),
			(o.textContent = e),
			(o.style.backgroundColor = t),
			r.appendChild(o)
	},
	saveNewMember = function () {
		var e,
			t,
			r,
			o = newNameInput.value.trim(),
			n = document.querySelector(".members__list"),
			a = document.querySelector(".select__color"),
			c = memberSelect.querySelectorAll("option")
		o
			? Array.from(c).find(function (e) {
					return e.value.toLowerCase() === o.toLowerCase()
			  })
				? alert("Member ".concat(o, " already exists."))
				: ((c = document.createElement("li")).classList.add("member"),
				  (e = document.createElement("div")).classList.add("member__color"),
				  (a = a.value),
				  (e.style.backgroundColor = "#" + a),
				  ((t = document.createElement("p")).innerHTML = o),
				  (r =
						Date.now().toString(36) + Math.random().toString(36).substr(2, 5)),
				  c.setAttribute("id", "member-".concat(r)),
				  ((r = document.createElement("option")).value = o),
				  (r.textContent = o),
				  (r.dataset.color = a),
				  memberSelect.appendChild(r),
				  c.appendChild(e),
				  c.appendChild(t),
				  n.appendChild(c),
				  (r.dataset.color = a),
				  clearInputs(),
				  closeWindow())
			: (newNameInput.placeholder = "Please enter a name before you save")
	},
	saveTask = function () {
		createNewTask(), closeWindow()
	}
addTaskBtn.addEventListener("click", showTaskCreator),
	cancelNewTaskBtn.addEventListener("click", closeWindow),
	saveNewTaskBtn.addEventListener("click", saveTask),
	addMemberBtn.addEventListener("click", showMemberCreator),
	cancelMember.addEventListener("click", closeWindow),
	saveMember.addEventListener("click", saveNewMember)
//# sourceMappingURL=data:application/json;charset=utf8;base64,
